# -*- coding: utf-8 -*-
"""recipe-generator

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1IRyVnXnx2dv1XqrzEqDZoAsO13yGbcF7runs the training for the specified number of `steps`. (

# Fine-Tuning GPT-2 on recipe dataset
This notebook fine-tunes the language generation model GPT-2 to a recipe dataset. The goal is to input ingredients and let the model generate the recipe instructions.

The code is adapted from [Max Woolf](http://minimaxir.com)'s [notebook Train a GPT-2 Text-Generating Model w/ GPU For Free](https://colab.research.google.com/drive/1VLG8e7YSEwypxU-noRNhsv5dW4NfTGce) (as at November 10th, 2019).
"""

# Commented out IPython magic to ensure Python compatibility.
# %tensorflow_version 1.x
import gpt_2_simple as gpt2
from datetime import datetime

# Downloading GPT-2 Model
#Already downloaded it, don't need to run and resave downloaded "model" file again
# gpt2.download_gpt2(model_name="124M") 

""" 
Finetune GPT-2

The next cell will start the actual finetuning of GPT-2. It creates a persistent TensorFlow session which stores the training config, then to have the finetuning run indefinitely, set `steps = -1`)

The model checkpoints will be saved in `/checkpoint/run1` by default. The checkpoints are saved every 500 steps (can be changed) and when the cell is stopped.

The training might time out after 4ish hours; make sure you end training and save the results so you don't lose them!

**IMPORTANT NOTE:** If you want to rerun this cell, **restart the VM first** (Runtime -> Restart Runtime). You will need to rerun imports but not recopy files.

Other optional-but-helpful parameters for `gpt2.finetune`:

*  **`restore_from`**: Set to `fresh` to start training from the base GPT-2, or set to `latest` to restart training from an existing checkpoint.
* **`sample_every`**: Number of steps to print example output
* **`print_every`**: Number of steps to print training progress.
* **`learning_rate`**:  Learning rate for the training. (default `1e-4`, can lower to `1e-5` if you have <1MB input data)
*  **`run_name`**: subfolder within `checkpoint` to save the model. This is useful if you want to work with multiple models (will also need to specify  `run_name` when loading the model)
* **`overwrite`**: Set to `True` if you want to continue finetuning an existing model (w/ `restore_from='latest'`) without creating duplicate copies.
"""

# Runs for approximately 3 hours. Lowest average error reached: 1.32.

# file_name = "df_tokenized_with_separator.txt" #Parsed Dataset you're using for you GPT 
# sess = gpt2.start_tf_sess()

# gpt2.finetune(sess,
#               dataset=file_name,
#               model_name='124M',
#               batch_size=4,
#               steps=1000,
#               restore_from='fresh',
#               run_name='run2',
#               print_every=10,
#               sample_every=200,
#               save_every=500
#               )

"""
The next cell will allow you to load the retrained model checkpoint + metadata necessary to generate text.
**IMPORTANT NOTE:** If you want to rerun this cell, **restart the VM first** (Runtime -> Restart Runtime). 
You will need to rerun imports but not recopy files.
"""

sess = gpt2.start_tf_sess()
gpt2.load_gpt2(sess, run_name='run1')

"""
Generate Text From The Trained Model
After you've trained the model or loaded a retrained model from checkpoint, you can now generate text. 
`generate` generates a single text from the loaded model.

Other optional-but-helpful parameters for gpt2.generate and friends:

1) length: Number of tokens to generate (default 1023, the maximum)
2) temperature: The higher the temperature, the crazier the text (default 0.7, recommended to keep between 0.7 and 1.0)
3) top_k: Limits the generated guesses to the top k guesses (default 0 which disables the behavior; if the generated output is super crazy, you may want to set top_k=40)
4) top_p: Nucleus sampling: limits the generated guesses to a cumulative probability. (gets good results on a dataset with top_p=0.9)
5) truncate: Truncates the input text until a given sequence, excluding that sequence (e.g. if truncate='<|endoftext|>', the returned text will include everything before the first <|endoftext|>). It may be useful to combine this with a smaller length if the input texts are short.
6) include_prefix: If using truncate and include_prefix=False, the specified prefix will not be included in the returned text.

"""

x = gpt2.generate(sess,
              temperature=0.75,
              prefix="['bell peppers', 'rice', 'chili powder', 'potatos', 'mushroom']",
              nsamples=1,
              run_name='run2',
              truncate='</>separator</>',
              include_prefix=False
              )

print(x)


"""# Etcetera

If the notebook has errors (e.g. GPU Sync Fail), force-kill the Colaboratory virtual machine and restart it with the command below:
"""


"""# LICENSE

MIT License

Copyright (c) 2019 Max Woolf

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
"""